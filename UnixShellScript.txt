1)Write a program which take a file name as a command line argument. Count the number of characters, number of words, number of line, number of vowels and display them on screen.

#include<stdio.h>
#include<fcntl.h>
#include<string.h>
char buffer[2048];

int main(int argc,char *argv[])
{
    int fdold;

    int count;

    int i,word,space,vovals,line,ch;

    word = 0;
    space = 0;
    vovals = 0;
    line = 0 ;
    ch=0;


if(argc  == 2)
{


    fdold = open(argv[1],O_RDONLY);
    
    if(fdold == -1)
    {
        printf("cannot open file ");
    }
    else
    {
        while((count = read(fdold,buffer,sizeof(buffer))) > 0)
        {
            for (i=0;i<strlen(buffer)-1;i++)
            {
                if(buffer[i] == ' ' || buffer[i] == '.')
                {
                    word++;
                }
                if(buffer[i] == ' ')
                {
                    space++;
                }
                if(buffer[i] == 'a' || buffer[i] == 'e' || buffer[i] == 'i' || buffer[i] == 'o' || buffer[i] == 'u' ||
                    buffer[i] == 'A' || buffer[i] == 'E' || buffer[i] == 'I' || buffer[i] == 'O' || buffer[i] == 'U')
                {
                    vovals++;                
                }
                if(buffer[i] == '\n')
                {
                    line++;
                }
                
            }
            ch = ch + strlen(buffer);            
        }

        printf("word is : %d\n",word);
        printf("Space is : %d\n",space);
        printf("Vovals is : %d\n",vovals);
        printf("line is : %d\n",line+1);
        printf("charector is :%d\n",ch - space);
    }
}
else
{
    printf("plzz gave a 1 argument..!!");
}
return 0;
}


2)-Write a command line program to accept number say N1.
Display all files from the current directory, whose size is
greater than N1.

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

char path[50];

int main(int argc, char* argv[])
{
    int size;

    // to get the Current Directory Path Used This System Call..!!    

    getcwd(path,50);

    printf("Current Directory Path Is:%s\n",path);

    DIR *mydir;
    struct dirent *myfile;
    struct stat mystat;


    mydir = opendir(path);

    while((myfile = readdir(mydir)) != NULL)
    {
        stat(myfile->d_name, &mystat);    
    size = atoi(argv[1]);
    if(mystat.st_size > size)
    {
        printf("%d",mystat.st_size);
        printf(" %s\n", myfile->d_name);    
    }
        
    }
    closedir(mydir);
}

3)-Write a command line program to accept file name followed by a number say N1. Display line N1 in reverse order of its characters.


#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>
#include<stdlib.h>
#include<string.h>

char buffer[2048];

void readLine(int fd, int LineNo);

main(int argc,char *argv[])
{

   int fd,LineNo;
  
   if(argc != 3)
   {
       printf("Enter The Two Argument First File Name And Other Line No..!!");
       exit(0);       
   }
          
   fd = open(argv[1],O_RDONLY);

   if(fd == -1)
   {
       printf("File Is Not Open");
       exit(0);
   }

   LineNo = atoi(argv[2]);

   readLine(fd,LineNo);
}

void readLine(int fd, int LineNo)
{
   int count,i,line=0,t=0,j;
   char Line[100],OneL[100],ch[]= { ' ', ' '};
   while((count = read(fd,buffer,sizeof(buffer))) > 0)
   {
       for (i=0;i < count;i++)
       {
           if(buffer[i] == '\n')
           {
               Line[t++] = '\0';
               t=0;
               strcpy(OneL,Line);
               strcpy(Line,ch);               
               line++;
              
               if(LineNo == line)
               {
                   for(j=strlen(OneL);j>=0;j--)
                   {
                       printf("%c",OneL[j]);
                   }
                   printf("\n");
               }
               else
               {
                   printf("%s\n",OneL);
               }
           }
           else
           {
               Line[t] = buffer[i];
               t++;               
           }
       }
       printf("Total Line is:%d",line);
   }
}

4)- Write a program to create a child process. Parent process will display three messages. First message will displayed before creation of child process. Second message will displayed only if child process is alive. Last message will displayed after completion of child process.


#include<unistd.h>
#include<sys/wait.h>


main(int argc,char *argv[])
{
int pid,w,status;
printf("parent process before the child process created \n");
pid=fork();
if(pid==0)
{

printf("Parent process during creating the child process \n");
}
sleep(3);
w=wait(&status);
printf(" parent process after the executing child process \n");
}

/*
sai@sai-VirtualBox:~/Desktop$ cc -o p4 p4.c
p4.c: In function main:
p4.c:8:2: warning: incompatible implicit declaration of built-in function printf [enabled by default]
sai@sai-VirtualBox:~/Desktop$ ./p4
parent process before the child process created 
Parent process during creating the child process 
parent process after the executing child process 
parent process after the executing child process 

*/

5)- Write a program to create a child process. Parent process will display message child process terminated on termination of child process. (Hint: catch SIGCHLD signal in parent)

# include <unistd.h>
# include <sys/types.h>
# include <stdio.h>
# include <sys/wait.h>
# include <signal.h>

void handler(int sig) 
{    
    printf("Iam in handler ...%d\n",sig);
}    

main() 
{

    int status;
    pid_t pid;

    signal(SIGCHLD,handler);

    pid = fork();

    printf("Child Process id is : %d\n", pid);

    if( pid == 0 )
        {
        printf("child process id is  %d\n",getpid());
        exit(0);
    }  

    sleep(3);
    pid = wait(&status);
    printf("process terminated is %d\n",pid);
}

6)- Write a program to create three child process. The parent process send the signal to terminate all these child processes.

#include<stdio.h>
#include<signal.h>

main()
{
    int pid[3],status,i;
    for(i=0;i<3;i++)
    {
    pid[i]=fork();
    printf("\n new created child process value is :%d",pid[i]);

    }
    for(i=0;i<3;i++)
    {
        if(pid[i])
        {
            printf("for terminate the process  \n");
            kill(pid[i],9);
            printf("termination of the child process :%d \n ",pid[i]);
        }
    }
}

}

7)- Write a program to create a child process in which child process displays number of line sent by parent process.

#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

main(int agrc,char *argv[])
{
    int fd[2],pid,line=0,n;
    char buffer[2048]="Hardik shah\nkevin patel\njay lad\n",buffer2[1];

    if(pipe(fd)==-1)
    {
        printf(" problem to create the pipe \n ");
        exit(0);
    }
    else
    {
        pid=fork();

        if(pid!=0)
        {
            printf("Perent Send Data To Chlid Data is:- %s ",buffer);
            close(fd[0]);
            write(fd[1],buffer,strlen(buffer));
            close(fd[1]);
        }
        else
        {
            close(fd[1]);
            printf("Chlid Process Read The Content send by the Perent.");
            while((n=read(fd[0],buffer2,1)) == 1)
            {
                if(buffer2[0] == '\n')
                {
                    line++;
                }
            }
            printf("Number of line send by Perent:-%d",line);
            close(fd[0]);
        }

    }
}


8)- Write a program to execute ls command in child process. Parent process must wait for child termination.

#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
main()
{
    int pid,w,Status;
    printf("PRENT PROCESS PORTION  \n");
    pid=fork();
    if(pid==0)
    {
        printf("child process part \n ");
        execl("/bin/ls","ls",0);
    }
    sleep(3);
    w = wait(&Status);
    printf("parent process after child execution \n ");
}

9)- Write a program to create a pipe and share between parent and child process. Parent writes content to pipe from the file and child reads the content and display number of characters.

#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

main(int agrc,char *argv[])
{
    int fd[2],pid,n,f,ch;
    char buffer[2048];

    if(pipe(fd)==-1)
    {
        printf(" problem to create the pipe \n ");
        exit(0);
    }
    else
    {
        pid=fork();

        if(pid!=0)
        {

            close(fd[0]);
            f = open("hardik",O_RDONLY);
            while((n = read(f,buffer,2048)) > 0)
            {
                write(fd[1],buffer,n);
            }
            close(fd[1]);
        }
        else
        {
            close(fd[1]);
            ch = 0;
            while((n=read(fd[0],buffer,2048)) > 0)
            {
                ch = ch + n;
            }
            printf("Number of Charecter:-%d",ch-1);
            close(fd[0]);
        }

    }
}

10)- Write programs to demonstrate communication between two processes. First process while send content of file to second process. Second process displays content by changing case.

#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>

main(int agrc,char *argv[])
{
    int fd[2],pid,n,f,ch;
    char buffer[2048],*cha;

    if(pipe(fd)==-1)
    {
        printf(" problem to create the pipe \n ");
        exit(0);
    }
    else
    {
        pid=fork();

        if(pid!=0)
        {

            close(fd[0]);
            f = open("hardik",O_RDONLY);
            while((n = read(f,buffer,2048)) > 0)
            {
                write(fd[1],buffer,n);
            }
            close(fd[1]);
        }
        else
        {
            close(fd[1]);
            ch = 0;
            while((n=read(fd[0],cha,1)) > 0)
            {
                if(*cha >= 'a' && *cha <= 'z')
                {
                    printf("%c",*cha - 32);
                }
                else if(*cha >= 'A' && *cha <= 'Z')
                {
                    printf("%c",*cha + 32);
                }
                else
                {
                    printf("%c",*cha);
                }
            }
            close(fd[0]);
        }

    }
}
